name: Build
on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**/*.md'
      - '.github/README.md'
  pull_request:
    branches: [ main, master ]
    paths-ignore:
      - '**/*.md'
      - '.github/README.md'
  workflow_dispatch:

env:
  JAVA_VERSION: '17'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          build-tools: '35.0.0'
      
      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "ndk.dir=$ANDROID_NDK_ROOT" >> local.properties
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      - name: List Projects and Tasks
        run: |
          echo "Available projects:"
          ./gradlew projects
          echo "Available tasks:"
          ./gradlew tasks --all
      
      - name: Build All Plugins
        run: |
          echo "Building all plugins..."
          ./gradlew makeJar
          
      - name: Setup Build Directory
        run: |
          mkdir -p build/repos/repos
          mkdir -p build/repos/plugins
      
      - name: Copy Plugin Files
        run: |
          echo "Searching for built plugin files..."
          
          # Find CS3 files (Cloudstream plugin format)
          find . -name "*.cs3" -type f -exec echo "Found CS3: {}" \;
          find . -name "*.cs3" -type f -exec cp {} build/repos/plugins/ \;
          
          # Also look for jar files in build/libs of subprojects
          find . -path "*/build/libs/*.jar" -type f -exec echo "Found JAR: {}" \;
          find . -path "*/build/libs/*.jar" -type f -exec cp {} build/repos/plugins/ \;
          
          echo "Contents of plugins directory:"
          ls -la build/repos/plugins/ || echo "No files copied"
      
      - name: Create Repository Structure
        run: |
          cd build/repos
          
          # Create repository index or manifest if needed
          echo "Creating repository structure..."
          
          if [ "$(ls -A plugins/)" ]; then
            echo "Plugins built successfully:"
            ls -la plugins/
            
            # Create a simple index
            echo "# Cloudstream Extensions" > README.md
            echo "Built on: $(date)" >> README.md
            echo "Commit: ${{ github.sha }}" >> README.md
            echo "" >> README.md
            echo "## Available Plugins:" >> README.md
            for file in plugins/*; do
              if [ -f "$file" ]; then
                echo "- $(basename "$file")" >> README.md
              fi
            done
          else
            echo "No plugins were built" > README.md
            echo "This may indicate a build issue" >> README.md
          fi
          
          # Create zip
          zip -r ../repos.zip .
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cloudstream-plugins
          path: build/repos.zip
          retention-days: 90
          
      - name: Deploy to Builds Branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd build/repos
          
          # Initialize git repository
          git init
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git branch -M builds
          
          # Add all files
          git add -A
          git commit -m "Auto-build plugins from commit ${{ github.sha }}"
          
          # Push to builds branch
          git push -f "https://${{ github.actor }}:${GITHUB_TOKEN}@github.com/${{ github.repository }}" builds
